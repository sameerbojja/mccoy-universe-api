openapi: 3.0.3
info:
  title: McCoy Quantum Content API
  version: 1.0.0
  description: Read-only API for accessing courses, topics, items, and item variants
servers:
  - url: https://quantum-api.mccoy.org/
security:
  - ApiKeyAuth: []

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      description: ApiKey ak-xxxxxxxx_yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
  parameters:
    Page:
      name: page
      in: query
      schema: { type: integer, minimum: 1, default: 1 }
    PageSize:
      name: page_size
      in: query
      schema: { type: integer, minimum: 1, maximum: 100, default: 50 }
    SortBy:
      name: sort_by
      in: query
      schema: { type: string }
      description: "Courses: name | Topics: l1_name, l2_name, item_count | Items: fact"
    SortOrder:
      name: sort_order
      in: query
      schema: { type: string, enum: [asc, desc], default: asc }
    UUID:
      name: id
      in: path
      required: true
      schema: { type: string, format: uuid }
  schemas:
    Meta:
      type: object
      properties:
        timestamp: { type: string, format: date-time }
        request_id: { type: string }
        version: { type: string }
    Error:
      type: object
      properties:
        success: { type: boolean, example: false }
        error:
          type: object
          properties:
            code: { type: string }
            message: { type: string }
            details: { type: object }
          required: [code, message]
        meta: { $ref: '#/components/schemas/Meta' }
      required: [success, error, meta]
    Pagination:
      type: object
      properties:
        page: { type: integer }
        page_size: { type: integer }
        total_items: { type: integer }
        total_pages: { type: integer }
        has_next: { type: boolean }
        has_prev: { type: boolean }
    Course:
      type: object
      properties:
        id: { type: string, format: uuid }
        course_name: { type: string }
        description: { type: string }
      required: [id, course_name, description]
    Topic:
      type: object
      properties:
        id: { type: string, format: uuid }
        l1_name: { type: string }
        l2_name: { type: string }
        item_count: { type: integer }
      required: [id, l1_name, l2_name, item_count]
    Item:
      type: object
      properties:
        id: { type: string, format: uuid }
        fact: { type: string }
        supporting_content: { type: string }
        study_bullets: { type: string }
      required: [id, fact, supporting_content, study_bullets]
    ItemVariant:
      type: object
      properties:
        id: { type: string, format: uuid }
        variant_type: { type: string }
        content: { type: object }
      required: [id, variant_type, content]
    ListResponse:
      type: object
      properties:
        success: { type: boolean, example: true }
        data: { type: array }
        pagination: { $ref: '#/components/schemas/Pagination' }
        meta: { $ref: '#/components/schemas/Meta' }
      required: [success, data, meta]
    ObjectResponse:
      type: object
      properties:
        success: { type: boolean, example: true }
        data: { type: object }
        meta: { $ref: '#/components/schemas/Meta' }
      required: [success, data, meta]

paths:
  /api/v1/courses:
    get:
      summary: List courses
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/SortBy'
        - $ref: '#/components/parameters/SortOrder'
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items: { $ref: '#/components/schemas/Course' }
  /api/v1/courses/{id}:
    get:
      summary: Get course
      parameters:
        - $ref: '#/components/parameters/UUID'
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ObjectResponse'
                  - type: object
                    properties:
                      data: { $ref: '#/components/schemas/Course' }
  /api/v1/courses/{id}/topics:
    get:
      summary: List topics
      parameters:
        - $ref: '#/components/parameters/UUID'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/SortBy'
        - $ref: '#/components/parameters/SortOrder'
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items: { $ref: '#/components/schemas/Topic' }
  /api/v1/topics/{id}:
    get:
      summary: Get topic
      parameters:
        - $ref: '#/components/parameters/UUID'
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ObjectResponse'
                  - type: object
                    properties:
                      data: { $ref: '#/components/schemas/Topic' }
  /api/v1/topics/{id}/items:
    get:
      summary: List items
      parameters:
        - $ref: '#/components/parameters/UUID'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/SortBy'
        - $ref: '#/components/parameters/SortOrder'
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items: { $ref: '#/components/schemas/Item' }
  /api/v1/items/{id}:
    get:
      summary: Get item
      parameters:
        - $ref: '#/components/parameters/UUID'
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ObjectResponse'
                  - type: object
                    properties:
                      data: { $ref: '#/components/schemas/Item' }
  /api/v1/items/{id}/variants:
    get:
      summary: Get item variants
      description: Returns variants for an item. Auto-generates if missing.
      parameters:
        - $ref: '#/components/parameters/UUID'
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ObjectResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items: { $ref: '#/components/schemas/ItemVariant' }
